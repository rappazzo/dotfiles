#!/usr/bin/env perl

use Getopt::Long;
Getopt::Long::Configure("pass_through");

my $range;
my $branch = '';
GetOptions (
   "base=s"   => \$range,
   "range=s"  => \$range,
   "branch=s" => \$branch
);
unless ($branch) {
   chomp ($branch = `git symbolic-ref --short HEAD 2>/dev/null`);
}
my $rev = $branch ? $branch : 'HEAD';
if ($range && $range !~ /\.\./) {
   $range .= "..$rev";
}
unless ($range) {
   chomp ($range = `feature-base $branch`);
   $range .= '..$rev';
}
printf "Using range: %s\n", $range;

# Doesn't support renames or adds yet -- prompt?

#sorted by comment
chomp(my @changed_files = `git diff --name-only --diff-filter=a`);
my $by_fixup_commit;
my $file_target;
my @missing;

for my $changed_file (@changed_files) {
   chomp (my $fixup_commit=`git log --format=%H -n 1 $range -- $changed_file`);
   if ($fixup_commit) {
      push @{$by_fixup_commit->{$fixup_commit}}, $changed_file;
      $file_target->{$changed_file} = $fixup_commit;
   } else {
      push @missing, $changed_file;
   }
}

if (@missing) {
   #prompt?
   my $files = join("\n - ", @missing);
   print STDERR "WARNING:  Unable to determine fixup target for the following files:\n - $files\n";
}

for my $commit (keys %$by_fixup_commit) {
   for my $file (@{$by_fixup_commit->{$commit}}) {
      system "git", "add", $file;
   }
   system "git", "fixup", "--no-verify", "--no-edit";
}

printf "\nStaged %d commits:\n", scalar(keys %$by_fixup_commit);
chomp (my $from = $branch ? `git rev-parse $branch\@{upstream}` : '');
system "git", "log",  "$from..$rev" if $from;
# for file ($(git diff --name-only)); do git add $file; git fixup --no-verify --no-edit; done
