function eclipseN() {
   open -a $HOME/Applications/Eclipse.app --new --args -data /Users/mike/Documents/eclipse/workspace-$1
}
function only-my-branch {
   git log $1 --not $( git show-ref --heads | cut -d' ' -f2 | grep -v "^refs/heads/$1" )
}

function gk-file {
   gitk --all $(git log --format=%h --follow $@) -- $@ &
}
function gk-reflog {
   gitk --all --since="9 months ago" $(git reflog | cut -d'@' -f1) -- $@ &
}
function named {
   to_find=$1
   if [[ ! $to_find =~ .*"\.".* ]]; then
      to_find="$1.java"
   fi
   if git rev-parse --git-dir >/dev/null 2>&1; then
      git ls-files | grep -i $to_find | HEAD -n 1
   else
      find . -type f -name $to_find -print -quit | cut -c3-
   fi
}
function blame {
   git gui blame 2>/dev/null -- $(named $1) &
}

function cdup {
   newdir="${PWD/\/$1\/*/}/$1"
   if [[ -d "$newdir" ]]; then
      cd "$newdir"
   else
      echo "\"$newdir\" does not exist"
   fi
}
function findin {
   egrep . --include="$1" --ignore-case --line-number --recursive --regexp="$2"
}
function infor-mfa {
   secret=$(cred infor-mfa --stdout)
   mfa_key=$(oathtool -b --totp $secret)
   echo -n $mfa_key | pbcopy
   echo "MFA value ($mfa_key) copied to clipboard"
}

#shell=$(echo $0)
#echo $shell
if which compdef > /dev/null 2>&1; then
   # zsh
   function _cdup_complete {
      local list=$(pwd | cut -c 2- | sed -e 's#/[^/]*$##g' -e 's/\([ ()]\)/\\\\\1/g')
      for i in $(echo ${list} | tr "/" "\n"); do
         compadd $i
      done
   }
    
   compdef _cdup_complete cdup

else
    # bash
    function _cdup_complete {
        local word=${COMP_WORDS[COMP_CWORD]}
        local list=$(pwd | cut -c 2- | sed -e 's#/[^/]*$##g' -e 's/\([ ()]\)/\\\\\1/g')
        IFS=/
        list=$(compgen -W "$list" -- "$word")
        IFS=$'\n'
        COMPREPLY=($list)
        return 0
    }
    
    complete -F _cdup_complete cdup

fi

hist() {
   print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed "s/ *[0-9]*\** *//")
}

function reflog() {
  git reflog --color=always "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

function opentab() {
   dir=$1
   if [[ ! -e $dir ]]; then
      dir=`pwd`
   elif [[ -f $dir ]]; then
      dir=$(dirname $dir)
   fi
   if [[ ! -d $dir ]]; then
      echo >&2 "${dir} is not a folder"
      return 1
   fi
   case $dir in
      /*) ;;
      *) dir="$(pwd)/$dir";;
   esac
   osascript -e "
      tell application \"Finder\"
         activate
         set t to target of Finder window 1
         set toolbar visible of window 1 to true
      end tell
      tell application \"System Events\"
         keystroke \"t\" using command down
      end tell
      tell application \"Finder\"
         set target of the front Finder window to (POSIX file \"${dir}\")
      end tell
   " 1> /dev/null
}

function blame-count {
   file=$1
   if [[ ${file} == "named" ]]; then
      file=$(named $2)
   fi
   git blame $file --line-porcelain | grep "^author " | sort | uniq -c | awk '{printf "%-4s %s %s %s\n", $1, $3, $4, $5}' | sort -nr
}

function branch-issues {
   branch=$1
   if [[ "$branch" == "" ]]; then
      branch=$(git symbolic-ref --short HEAD)
   fi
   if [[ "$branch" == "" ]]; then
      echo >&2 "No branch"
      return 1
   fi
   base=$(feature-base $branch)
   if [[ "$base" == "" ]]; then
      base=$(git log -n 1 --merges --format=%h)
   fi
   git log --format='%s %b' $base..$branch | sed 's/[^0-9a-zA-Z-]/ /g' | tr ' ' '\n' | egrep "^(PSO|GTN|GTBUG)-[0-9]+\$" | sort -u
}

function last-week {
   git log --all --pretty='%ad %H' --date=short --since="1 week ago" --author="Michael Rappazzo" |\
      awk -v start_day="$(date -v-8d +%Y-%m-%d)" '$1 >= start_day {print $2}' |\
      git log --no-walk --stdin --color=always |\
      awk -F] '!seen[$2]++'
}

